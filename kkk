-- Generated using RoadToGlory's Converter v1.1 (RoadToGlory#9879)

-- Instances:

local Converted = {
	["_DevelopemtTools"] = Instance.new("ScreenGui");
	["_Frame"] = Instance.new("Frame");
	["_Title"] = Instance.new("TextLabel");
	["_Title1"] = Instance.new("TextLabel");
	["_UICorner"] = Instance.new("UICorner");
	["_UIAspectRatioConstraint"] = Instance.new("UIAspectRatioConstraint");
	["_Frame1"] = Instance.new("Frame");
	["_UIGradient"] = Instance.new("UIGradient");
	["_MainFrame1"] = Instance.new("Frame");
	["_TextButton"] = Instance.new("TextButton");
	["_LocalScript"] = Instance.new("LocalScript");
	["_TextButton1"] = Instance.new("TextButton");
	["_LocalScript1"] = Instance.new("LocalScript");
	["_TextButton2"] = Instance.new("TextButton");
	["_LocalScript2"] = Instance.new("LocalScript");
	["_TextButton3"] = Instance.new("TextButton");
	["_LocalScript3"] = Instance.new("LocalScript");
	["_TextButton4"] = Instance.new("TextButton");
	["_LocalScript4"] = Instance.new("LocalScript");
	["_TextButton5"] = Instance.new("TextButton");
	["_LocalScript5"] = Instance.new("LocalScript");
	["_TextButton6"] = Instance.new("TextButton");
	["_LocalScript6"] = Instance.new("LocalScript");
	["_TextButton7"] = Instance.new("TextButton");
	["_Script1"] = Instance.new("LocalScript");
	["_UICorner1"] = Instance.new("UICorner");
	["_Tools"] = Instance.new("TextButton");
	["_Frame2"] = Instance.new("Frame");
	["_LocalScript7"] = Instance.new("LocalScript");
	["_Remote Scanner"] = Instance.new("TextButton");
	["_Frame3"] = Instance.new("Frame");
	["_LocalScript8"] = Instance.new("LocalScript");
	["_Script scanner"] = Instance.new("TextButton");
	["_Frame4"] = Instance.new("Frame");
	["_LocalScript9"] = Instance.new("LocalScript");
	["_nil scanner"] = Instance.new("TextButton");
	["_Frame5"] = Instance.new("Frame");
	["_LocalScript10"] = Instance.new("LocalScript");
	["_MainFrame2"] = Instance.new("Frame");
	["_UICorner2"] = Instance.new("UICorner");
	["_ScrollingFrame"] = Instance.new("ScrollingFrame");
	["_UIListLayout"] = Instance.new("UIListLayout");
	["_Frame6"] = Instance.new("Frame");
	["_TextButton8"] = Instance.new("TextButton");
	["_LocalScript11"] = Instance.new("LocalScript");
	["_TextButton9"] = Instance.new("TextButton");
	["_LocalScript12"] = Instance.new("LocalScript");
	["_TextButton10"] = Instance.new("TextButton");
	["_LocalScript13"] = Instance.new("LocalScript");
	["_TextButton11"] = Instance.new("TextButton");
	["_LocalScript14"] = Instance.new("LocalScript");
	["_MainFrame3"] = Instance.new("Frame");
	["_UICorner3"] = Instance.new("UICorner");
	["_ScrollingFrame1"] = Instance.new("ScrollingFrame");
	["_UIListLayout1"] = Instance.new("UIListLayout");
	["_Frame7"] = Instance.new("Frame");
	["_TextButton12"] = Instance.new("TextButton");
	["_LocalScript15"] = Instance.new("LocalScript");
	["_TextButton13"] = Instance.new("TextButton");
	["_LocalScript16"] = Instance.new("LocalScript");
	["_TextButton14"] = Instance.new("TextButton");
	["_LocalScript17"] = Instance.new("LocalScript");
	["_TextButton15"] = Instance.new("TextButton");
	["_LocalScript18"] = Instance.new("LocalScript");
	["_TextLabel"] = Instance.new("TextLabel");
	["_MainFrame4"] = Instance.new("Frame");
	["_UICorner4"] = Instance.new("UICorner");
	["_ScrollingFrame2"] = Instance.new("ScrollingFrame");
	["_UIListLayout2"] = Instance.new("UIListLayout");
	["_Frame8"] = Instance.new("Frame");
	["_TextButton16"] = Instance.new("TextButton");
	["_LocalScript19"] = Instance.new("LocalScript");
	["_TextLabel1"] = Instance.new("TextLabel");
	["_TextButton17"] = Instance.new("TextButton");
	["_LocalScript20"] = Instance.new("LocalScript");
	["_TextButton18"] = Instance.new("TextButton");
	["_LocalScript21"] = Instance.new("LocalScript");
	["_Magic Open"] = Instance.new("Frame");
	["_TextButton19"] = Instance.new("TextButton");
	["_LocalScript22"] = Instance.new("LocalScript");
}

-- Properties:

Converted["_DevelopemtTools"].ZIndexBehavior = Enum.ZIndexBehavior.Sibling
Converted["_DevelopemtTools"].Name = "DevelopemtTools"
Converted["_DevelopemtTools"].Parent = game:GetService("CoreGui")

Converted["_Frame"].BackgroundColor3 = Color3.fromRGB(25.000000409781933, 23.000000528991222, 30.00000011175871)
Converted["_Frame"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_Frame"].BorderSizePixel = 0
Converted["_Frame"].Position = UDim2.new(0.249607921, 0, 0.168169245, 0)
Converted["_Frame"].Size = UDim2.new(0.5, 0, 0.699999988, 0)
Converted["_Frame"].Parent = Converted["_DevelopemtTools"]

Converted["_Title"].Font = Enum.Font.SourceSans
Converted["_Title"].Text = "HUB"
Converted["_Title"].TextColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Title"].TextScaled = true
Converted["_Title"].TextSize = 14
Converted["_Title"].TextStrokeColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Title"].TextStrokeTransparency = 0
Converted["_Title"].TextWrapped = true
Converted["_Title"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Title"].BackgroundTransparency = 1
Converted["_Title"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_Title"].BorderSizePixel = 0
Converted["_Title"].Position = UDim2.new(0.165969715, 0, 0.0445809476, 0)
Converted["_Title"].Size = UDim2.new(0.109299518, 0, 0.14458096, 0)
Converted["_Title"].Name = "Title"
Converted["_Title"].Parent = Converted["_Frame"]

Converted["_Title1"].Font = Enum.Font.SourceSans
Converted["_Title1"].Text = "TTJY"
Converted["_Title1"].TextColor3 = Color3.fromRGB(255, 0, 4.000000236555934)
Converted["_Title1"].TextScaled = true
Converted["_Title1"].TextSize = 14
Converted["_Title1"].TextStrokeColor3 = Color3.fromRGB(255, 0, 0)
Converted["_Title1"].TextStrokeTransparency = 0
Converted["_Title1"].TextWrapped = true
Converted["_Title1"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Title1"].BackgroundTransparency = 1
Converted["_Title1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_Title1"].BorderSizePixel = 0
Converted["_Title1"].Position = UDim2.new(0.0365917794, 0, 0.0445809476, 0)
Converted["_Title1"].Size = UDim2.new(0.11500261, 0, 0.144580975, 0)
Converted["_Title1"].Name = "Title"
Converted["_Title1"].Parent = Converted["_Frame"]

Converted["_UICorner"].Parent = Converted["_Frame"]

Converted["_UIAspectRatioConstraint"].AspectRatio = 2
Converted["_UIAspectRatioConstraint"].Parent = Converted["_Frame"]

Converted["_Frame1"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Frame1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_Frame1"].BorderSizePixel = 0
Converted["_Frame1"].Position = UDim2.new(0.0335000008, 0, 0.170000002, 0)
Converted["_Frame1"].Size = UDim2.new(0.25, 0, 0.00999999978, 0)
Converted["_Frame1"].Parent = Converted["_Frame"]

Converted["_UIGradient"].Color = ColorSequence.new{
	ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
	ColorSequenceKeypoint.new(0.08117444068193436, Color3.fromRGB(255, 255, 255)),
	ColorSequenceKeypoint.new(0.8911917209625244, Color3.fromRGB(255, 255, 255)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))
}
Converted["_UIGradient"].Parent = Converted["_Frame1"]

Converted["_MainFrame1"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_MainFrame1"].BackgroundTransparency = 0.949999988079071
Converted["_MainFrame1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_MainFrame1"].BorderSizePixel = 0
Converted["_MainFrame1"].Position = UDim2.new(0.049660217, 0, 0.23000519, 0)
Converted["_MainFrame1"].Size = UDim2.new(0.899999976, 0, 0.710925221, 0)
Converted["_MainFrame1"].Visible = false
Converted["_MainFrame1"].Name = "MainFrame1"
Converted["_MainFrame1"].Parent = Converted["_Frame"]

Converted["_TextButton"].Font = Enum.Font.SourceSans
Converted["_TextButton"].Text = "DEX"
Converted["_TextButton"].TextColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton"].TextScaled = true
Converted["_TextButton"].TextSize = 14
Converted["_TextButton"].TextWrapped = true
Converted["_TextButton"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton"].BackgroundTransparency = 1
Converted["_TextButton"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_TextButton"].BorderSizePixel = 0
Converted["_TextButton"].Position = UDim2.new(-0.00145200896, 0, 0, 0)
Converted["_TextButton"].Size = UDim2.new(0, 200, 0, 50)
Converted["_TextButton"].Parent = Converted["_MainFrame1"]

Converted["_TextButton1"].Font = Enum.Font.SourceSans
Converted["_TextButton1"].Text = "INF Yield"
Converted["_TextButton1"].TextColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton1"].TextScaled = true
Converted["_TextButton1"].TextSize = 14
Converted["_TextButton1"].TextWrapped = true
Converted["_TextButton1"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton1"].BackgroundTransparency = 1
Converted["_TextButton1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_TextButton1"].BorderSizePixel = 0
Converted["_TextButton1"].Position = UDim2.new(-0.00145200896, 0, 0.408088237, 0)
Converted["_TextButton1"].Size = UDim2.new(0, 200, 0, 50)
Converted["_TextButton1"].Parent = Converted["_MainFrame1"]

Converted["_TextButton2"].Font = Enum.Font.SourceSans
Converted["_TextButton2"].Text = "Position Finder"
Converted["_TextButton2"].TextColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton2"].TextScaled = true
Converted["_TextButton2"].TextSize = 14
Converted["_TextButton2"].TextWrapped = true
Converted["_TextButton2"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton2"].BackgroundTransparency = 1
Converted["_TextButton2"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_TextButton2"].BorderSizePixel = 0
Converted["_TextButton2"].Position = UDim2.new(-0.00145200896, 0, 0.816176474, 0)
Converted["_TextButton2"].Size = UDim2.new(0, 200, 0, 50)
Converted["_TextButton2"].Parent = Converted["_MainFrame1"]

Converted["_TextButton3"].Font = Enum.Font.SourceSans
Converted["_TextButton3"].Text = "Magnitude Calculator"
Converted["_TextButton3"].TextColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton3"].TextScaled = true
Converted["_TextButton3"].TextSize = 14
Converted["_TextButton3"].TextWrapped = true
Converted["_TextButton3"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton3"].BackgroundTransparency = 1
Converted["_TextButton3"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_TextButton3"].BorderSizePixel = 0
Converted["_TextButton3"].Position = UDim2.new(0.355753094, 0, 0, 0)
Converted["_TextButton3"].Size = UDim2.new(0, 200, 0, 50)
Converted["_TextButton3"].Parent = Converted["_MainFrame1"]

Converted["_TextButton4"].Font = Enum.Font.SourceSans
Converted["_TextButton4"].Text = "Remote Spy"
Converted["_TextButton4"].TextColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton4"].TextScaled = true
Converted["_TextButton4"].TextSize = 14
Converted["_TextButton4"].TextWrapped = true
Converted["_TextButton4"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton4"].BackgroundTransparency = 1
Converted["_TextButton4"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_TextButton4"].BorderSizePixel = 0
Converted["_TextButton4"].Position = UDim2.new(0.354301035, 0, 0.408088237, 0)
Converted["_TextButton4"].Size = UDim2.new(0, 200, 0, 50)
Converted["_TextButton4"].Parent = Converted["_MainFrame1"]

Converted["_TextButton5"].Font = Enum.Font.SourceSans
Converted["_TextButton5"].Text = "Hydroxide"
Converted["_TextButton5"].TextColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton5"].TextScaled = true
Converted["_TextButton5"].TextSize = 14
Converted["_TextButton5"].TextWrapped = true
Converted["_TextButton5"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton5"].BackgroundTransparency = 1
Converted["_TextButton5"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_TextButton5"].BorderSizePixel = 0
Converted["_TextButton5"].Position = UDim2.new(0.355753094, 0, 0.816176474, 0)
Converted["_TextButton5"].Size = UDim2.new(0, 200, 0, 50)
Converted["_TextButton5"].Parent = Converted["_MainFrame1"]

Converted["_TextButton6"].Font = Enum.Font.SourceSans
Converted["_TextButton6"].Text = "UNC"
Converted["_TextButton6"].TextColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton6"].TextScaled = true
Converted["_TextButton6"].TextSize = 14
Converted["_TextButton6"].TextWrapped = true
Converted["_TextButton6"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton6"].BackgroundTransparency = 1
Converted["_TextButton6"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_TextButton6"].BorderSizePixel = 0
Converted["_TextButton6"].Position = UDim2.new(0.708602011, 0, 0, 0)
Converted["_TextButton6"].Size = UDim2.new(0, 200, 0, 50)
Converted["_TextButton6"].Parent = Converted["_MainFrame1"]

Converted["_TextButton7"].Font = Enum.Font.SourceSans
Converted["_TextButton7"].Text = "Instance - Convert"
Converted["_TextButton7"].TextColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton7"].TextScaled = true
Converted["_TextButton7"].TextSize = 14
Converted["_TextButton7"].TextWrapped = true
Converted["_TextButton7"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton7"].BackgroundTransparency = 1
Converted["_TextButton7"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_TextButton7"].BorderSizePixel = 0
Converted["_TextButton7"].Position = UDim2.new(0.708602011, 0, 0.408088237, 0)
Converted["_TextButton7"].Size = UDim2.new(0, 200, 0, 50)
Converted["_TextButton7"].Parent = Converted["_MainFrame1"]

Converted["_UICorner1"].Parent = Converted["_MainFrame1"]

Converted["_Tools"].Font = Enum.Font.SourceSans
Converted["_Tools"].Text = "Tools"
Converted["_Tools"].TextColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Tools"].TextSize = 19
Converted["_Tools"].TextStrokeColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Tools"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Tools"].BackgroundTransparency = 1
Converted["_Tools"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_Tools"].BorderSizePixel = 0
Converted["_Tools"].Position = UDim2.new(0.346720308, 0, 0.0651563033, 0)
Converted["_Tools"].Size = UDim2.new(0.100000001, 0, 0.100000001, 0)
Converted["_Tools"].Name = "Tools"
Converted["_Tools"].Parent = Converted["_Frame"]

Converted["_Frame2"].BackgroundColor3 = Color3.fromRGB(255, 0, 0)
Converted["_Frame2"].BackgroundTransparency = 1
Converted["_Frame2"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_Frame2"].BorderSizePixel = 0
Converted["_Frame2"].Position = UDim2.new(0.400000006, 0, 0.800000012, 0)
Converted["_Frame2"].Size = UDim2.new(0.200000003, 0, 0.0500000007, 0)
Converted["_Frame2"].Parent = Converted["_Tools"]

Converted["_Remote Scanner"].Font = Enum.Font.SourceSans
Converted["_Remote Scanner"].Text = "Remote Scanner"
Converted["_Remote Scanner"].TextColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Remote Scanner"].TextSize = 19
Converted["_Remote Scanner"].TextStrokeColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Remote Scanner"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Remote Scanner"].BackgroundTransparency = 1
Converted["_Remote Scanner"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_Remote Scanner"].BorderSizePixel = 0
Converted["_Remote Scanner"].Position = UDim2.new(0.460416079, 0, 0.0651563033, 0)
Converted["_Remote Scanner"].Size = UDim2.new(0.100000001, 0, 0.100000001, 0)
Converted["_Remote Scanner"].Name = "Remote Scanner"
Converted["_Remote Scanner"].Parent = Converted["_Frame"]

Converted["_Frame3"].BackgroundColor3 = Color3.fromRGB(255, 0, 0)
Converted["_Frame3"].BackgroundTransparency = 1
Converted["_Frame3"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_Frame3"].BorderSizePixel = 0
Converted["_Frame3"].Position = UDim2.new(0.400000006, 0, 0.800000012, 0)
Converted["_Frame3"].Size = UDim2.new(0.200000003, 0, 0.0500000007, 0)
Converted["_Frame3"].Parent = Converted["_Remote Scanner"]

Converted["_Script scanner"].Font = Enum.Font.SourceSans
Converted["_Script scanner"].Text = "Script scanner"
Converted["_Script scanner"].TextColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Script scanner"].TextSize = 19
Converted["_Script scanner"].TextStrokeColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Script scanner"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Script scanner"].BackgroundTransparency = 1
Converted["_Script scanner"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_Script scanner"].BorderSizePixel = 0
Converted["_Script scanner"].Position = UDim2.new(0.601555645, 0, 0.0651563033, 0)
Converted["_Script scanner"].Size = UDim2.new(0.100000001, 0, 0.100000001, 0)
Converted["_Script scanner"].Name = "Script scanner"
Converted["_Script scanner"].Parent = Converted["_Frame"]

Converted["_Frame4"].BackgroundColor3 = Color3.fromRGB(255, 0, 0)
Converted["_Frame4"].BackgroundTransparency = 1
Converted["_Frame4"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_Frame4"].BorderSizePixel = 0
Converted["_Frame4"].Position = UDim2.new(0.400000006, 0, 0.800000012, 0)
Converted["_Frame4"].Size = UDim2.new(0.200000003, 0, 0.0500000007, 0)
Converted["_Frame4"].Parent = Converted["_Script scanner"]

Converted["_nil scanner"].Font = Enum.Font.SourceSans
Converted["_nil scanner"].Text = "nil scanner"
Converted["_nil scanner"].TextColor3 = Color3.fromRGB(255, 255, 255)
Converted["_nil scanner"].TextSize = 19
Converted["_nil scanner"].TextStrokeColor3 = Color3.fromRGB(255, 255, 255)
Converted["_nil scanner"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_nil scanner"].BackgroundTransparency = 1
Converted["_nil scanner"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_nil scanner"].BorderSizePixel = 0
Converted["_nil scanner"].Position = UDim2.new(0.730933607, 0, 0.0651563033, 0)
Converted["_nil scanner"].Size = UDim2.new(0.100000001, 0, 0.100000001, 0)
Converted["_nil scanner"].Name = "nil scanner"
Converted["_nil scanner"].Parent = Converted["_Frame"]

Converted["_Frame5"].BackgroundColor3 = Color3.fromRGB(255, 0, 0)
Converted["_Frame5"].BackgroundTransparency = 1
Converted["_Frame5"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_Frame5"].BorderSizePixel = 0
Converted["_Frame5"].Position = UDim2.new(0.400000006, 0, 0.800000012, 0)
Converted["_Frame5"].Size = UDim2.new(0.200000003, 0, 0.0500000007, 0)
Converted["_Frame5"].Parent = Converted["_nil scanner"]

Converted["_MainFrame2"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_MainFrame2"].BackgroundTransparency = 1
Converted["_MainFrame2"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_MainFrame2"].BorderSizePixel = 0
Converted["_MainFrame2"].Position = UDim2.new(0.049660217, 0, 0.23000519, 0)
Converted["_MainFrame2"].Size = UDim2.new(0.899999976, 0, 0.710925221, 0)
Converted["_MainFrame2"].Visible = false
Converted["_MainFrame2"].Name = "MainFrame2"
Converted["_MainFrame2"].Parent = Converted["_Frame"]

Converted["_UICorner2"].Parent = Converted["_MainFrame2"]

Converted["_ScrollingFrame"].ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
Converted["_ScrollingFrame"].Active = true
Converted["_ScrollingFrame"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_ScrollingFrame"].BackgroundTransparency = 0.8999999761581421
Converted["_ScrollingFrame"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_ScrollingFrame"].BorderSizePixel = 0
Converted["_ScrollingFrame"].Size = UDim2.new(0.800000012, 0, 1, 0)
Converted["_ScrollingFrame"].Parent = Converted["_MainFrame2"]

Converted["_UIListLayout"].SortOrder = Enum.SortOrder.LayoutOrder
Converted["_UIListLayout"].Parent = Converted["_ScrollingFrame"]

Converted["_Frame6"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Frame6"].BackgroundTransparency = 0.8999999761581421
Converted["_Frame6"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_Frame6"].BorderSizePixel = 0
Converted["_Frame6"].Position = UDim2.new(0.818958163, 0, 0, 0)
Converted["_Frame6"].Size = UDim2.new(0.180000007, 0, 1, 0)
Converted["_Frame6"].Parent = Converted["_MainFrame2"]

Converted["_TextButton8"].Font = Enum.Font.SourceSans
Converted["_TextButton8"].Text = "Refresh"
Converted["_TextButton8"].TextColor3 = Color3.fromRGB(0, 255, 255)
Converted["_TextButton8"].TextScaled = true
Converted["_TextButton8"].TextSize = 14
Converted["_TextButton8"].TextWrapped = true
Converted["_TextButton8"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton8"].BackgroundTransparency = 1
Converted["_TextButton8"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_TextButton8"].BorderSizePixel = 0
Converted["_TextButton8"].Size = UDim2.new(1, 0, 0.100000001, 0)
Converted["_TextButton8"].Parent = Converted["_Frame6"]

Converted["_TextButton9"].Font = Enum.Font.SourceSans
Converted["_TextButton9"].Text = "Copy Remote Path"
Converted["_TextButton9"].TextColor3 = Color3.fromRGB(0, 255, 255)
Converted["_TextButton9"].TextScaled = true
Converted["_TextButton9"].TextSize = 14
Converted["_TextButton9"].TextWrapped = true
Converted["_TextButton9"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton9"].BackgroundTransparency = 1
Converted["_TextButton9"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_TextButton9"].BorderSizePixel = 0
Converted["_TextButton9"].Position = UDim2.new(0, 0, 0.327205896, 0)
Converted["_TextButton9"].Size = UDim2.new(1, 0, 0.100000001, 0)
Converted["_TextButton9"].Parent = Converted["_Frame6"]

Converted["_TextButton10"].Font = Enum.Font.SourceSans
Converted["_TextButton10"].Text = "Print Remote Path"
Converted["_TextButton10"].TextColor3 = Color3.fromRGB(0, 255, 255)
Converted["_TextButton10"].TextScaled = true
Converted["_TextButton10"].TextSize = 14
Converted["_TextButton10"].TextWrapped = true
Converted["_TextButton10"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton10"].BackgroundTransparency = 1
Converted["_TextButton10"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_TextButton10"].BorderSizePixel = 0
Converted["_TextButton10"].Position = UDim2.new(0, 0, 0.224264711, 0)
Converted["_TextButton10"].Size = UDim2.new(1, 0, 0.100000001, 0)
Converted["_TextButton10"].Parent = Converted["_Frame6"]

Converted["_TextButton11"].Font = Enum.Font.SourceSans
Converted["_TextButton11"].Text = "Warn Remote Path"
Converted["_TextButton11"].TextColor3 = Color3.fromRGB(0, 255, 255)
Converted["_TextButton11"].TextScaled = true
Converted["_TextButton11"].TextSize = 14
Converted["_TextButton11"].TextWrapped = true
Converted["_TextButton11"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton11"].BackgroundTransparency = 1
Converted["_TextButton11"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_TextButton11"].BorderSizePixel = 0
Converted["_TextButton11"].Position = UDim2.new(0, 0, 0.426470578, 0)
Converted["_TextButton11"].Size = UDim2.new(1, 0, 0.100000001, 0)
Converted["_TextButton11"].Parent = Converted["_Frame6"]

Converted["_MainFrame3"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_MainFrame3"].BackgroundTransparency = 1
Converted["_MainFrame3"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_MainFrame3"].BorderSizePixel = 0
Converted["_MainFrame3"].Position = UDim2.new(0.049660217, 0, 0.23000519, 0)
Converted["_MainFrame3"].Size = UDim2.new(0.899999976, 0, 0.710925221, 0)
Converted["_MainFrame3"].Visible = false
Converted["_MainFrame3"].Name = "MainFrame3"
Converted["_MainFrame3"].Parent = Converted["_Frame"]

Converted["_UICorner3"].Parent = Converted["_MainFrame3"]

Converted["_ScrollingFrame1"].ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
Converted["_ScrollingFrame1"].Active = true
Converted["_ScrollingFrame1"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_ScrollingFrame1"].BackgroundTransparency = 0.8999999761581421
Converted["_ScrollingFrame1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_ScrollingFrame1"].BorderSizePixel = 0
Converted["_ScrollingFrame1"].Size = UDim2.new(0.800000012, 0, 1, 0)
Converted["_ScrollingFrame1"].Parent = Converted["_MainFrame3"]

Converted["_UIListLayout1"].SortOrder = Enum.SortOrder.LayoutOrder
Converted["_UIListLayout1"].Parent = Converted["_ScrollingFrame1"]

Converted["_Frame7"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Frame7"].BackgroundTransparency = 0.8999999761581421
Converted["_Frame7"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_Frame7"].BorderSizePixel = 0
Converted["_Frame7"].Position = UDim2.new(0.818958163, 0, 0, 0)
Converted["_Frame7"].Size = UDim2.new(0.180000007, 0, 1, 0)
Converted["_Frame7"].Parent = Converted["_MainFrame3"]

Converted["_TextButton12"].Font = Enum.Font.SourceSans
Converted["_TextButton12"].Text = "Refresh"
Converted["_TextButton12"].TextColor3 = Color3.fromRGB(0, 255, 255)
Converted["_TextButton12"].TextScaled = true
Converted["_TextButton12"].TextSize = 14
Converted["_TextButton12"].TextWrapped = true
Converted["_TextButton12"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton12"].BackgroundTransparency = 1
Converted["_TextButton12"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_TextButton12"].BorderSizePixel = 0
Converted["_TextButton12"].Size = UDim2.new(1, 0, 0.100000001, 0)
Converted["_TextButton12"].Parent = Converted["_Frame7"]

Converted["_TextButton13"].Font = Enum.Font.SourceSans
Converted["_TextButton13"].Text = "Copy Script Path"
Converted["_TextButton13"].TextColor3 = Color3.fromRGB(0, 255, 255)
Converted["_TextButton13"].TextScaled = true
Converted["_TextButton13"].TextSize = 14
Converted["_TextButton13"].TextWrapped = true
Converted["_TextButton13"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton13"].BackgroundTransparency = 1
Converted["_TextButton13"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_TextButton13"].BorderSizePixel = 0
Converted["_TextButton13"].Position = UDim2.new(0, 0, 0.327205896, 0)
Converted["_TextButton13"].Size = UDim2.new(1, 0, 0.100000001, 0)
Converted["_TextButton13"].Parent = Converted["_Frame7"]

Converted["_TextButton14"].Font = Enum.Font.SourceSans
Converted["_TextButton14"].Text = "Print Script Path"
Converted["_TextButton14"].TextColor3 = Color3.fromRGB(0, 255, 255)
Converted["_TextButton14"].TextScaled = true
Converted["_TextButton14"].TextSize = 14
Converted["_TextButton14"].TextWrapped = true
Converted["_TextButton14"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton14"].BackgroundTransparency = 1
Converted["_TextButton14"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_TextButton14"].BorderSizePixel = 0
Converted["_TextButton14"].Position = UDim2.new(0, 0, 0.224264711, 0)
Converted["_TextButton14"].Size = UDim2.new(1, 0, 0.100000001, 0)
Converted["_TextButton14"].Parent = Converted["_Frame7"]

Converted["_TextButton15"].Font = Enum.Font.SourceSans
Converted["_TextButton15"].Text = "Warn Script Path"
Converted["_TextButton15"].TextColor3 = Color3.fromRGB(0, 255, 255)
Converted["_TextButton15"].TextScaled = true
Converted["_TextButton15"].TextSize = 14
Converted["_TextButton15"].TextWrapped = true
Converted["_TextButton15"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton15"].BackgroundTransparency = 1
Converted["_TextButton15"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_TextButton15"].BorderSizePixel = 0
Converted["_TextButton15"].Position = UDim2.new(0, 0, 0.426470578, 0)
Converted["_TextButton15"].Size = UDim2.new(1, 0, 0.100000001, 0)
Converted["_TextButton15"].Parent = Converted["_Frame7"]

Converted["_TextLabel"].Font = Enum.Font.SourceSans
Converted["_TextLabel"].Text = "LocalScript"
Converted["_TextLabel"].TextColor3 = Color3.fromRGB(255, 0, 0)
Converted["_TextLabel"].TextScaled = true
Converted["_TextLabel"].TextSize = 14
Converted["_TextLabel"].TextWrapped = true
Converted["_TextLabel"].BackgroundColor3 = Color3.fromRGB(255, 0, 4.000000236555934)
Converted["_TextLabel"].BackgroundTransparency = 1
Converted["_TextLabel"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_TextLabel"].BorderSizePixel = 0
Converted["_TextLabel"].Position = UDim2.new(0, 0, 0.897058845, 0)
Converted["_TextLabel"].Size = UDim2.new(1, 0, 0.100000001, 0)
Converted["_TextLabel"].Parent = Converted["_Frame7"]

Converted["_MainFrame4"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_MainFrame4"].BackgroundTransparency = 1
Converted["_MainFrame4"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_MainFrame4"].BorderSizePixel = 0
Converted["_MainFrame4"].Position = UDim2.new(0.049660217, 0, 0.23000519, 0)
Converted["_MainFrame4"].Size = UDim2.new(0.899999976, 0, 0.710925221, 0)
Converted["_MainFrame4"].Visible = false
Converted["_MainFrame4"].Name = "MainFrame4"
Converted["_MainFrame4"].Parent = Converted["_Frame"]

Converted["_UICorner4"].Parent = Converted["_MainFrame4"]

Converted["_ScrollingFrame2"].ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
Converted["_ScrollingFrame2"].Active = true
Converted["_ScrollingFrame2"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_ScrollingFrame2"].BackgroundTransparency = 0.8999999761581421
Converted["_ScrollingFrame2"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_ScrollingFrame2"].BorderSizePixel = 0
Converted["_ScrollingFrame2"].Size = UDim2.new(0.800000012, 0, 1, 0)
Converted["_ScrollingFrame2"].Parent = Converted["_MainFrame4"]

Converted["_UIListLayout2"].SortOrder = Enum.SortOrder.LayoutOrder
Converted["_UIListLayout2"].Parent = Converted["_ScrollingFrame2"]

Converted["_Frame8"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Frame8"].BackgroundTransparency = 0.8999999761581421
Converted["_Frame8"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_Frame8"].BorderSizePixel = 0
Converted["_Frame8"].Position = UDim2.new(0.818958163, 0, 0, 0)
Converted["_Frame8"].Size = UDim2.new(0.180000007, 0, 1, 0)
Converted["_Frame8"].Parent = Converted["_MainFrame4"]

Converted["_TextButton16"].Font = Enum.Font.SourceSans
Converted["_TextButton16"].Text = "Refresh"
Converted["_TextButton16"].TextColor3 = Color3.fromRGB(0, 255, 255)
Converted["_TextButton16"].TextScaled = true
Converted["_TextButton16"].TextSize = 14
Converted["_TextButton16"].TextWrapped = true
Converted["_TextButton16"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton16"].BackgroundTransparency = 1
Converted["_TextButton16"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_TextButton16"].BorderSizePixel = 0
Converted["_TextButton16"].Size = UDim2.new(1, 0, 0.100000001, 0)
Converted["_TextButton16"].Parent = Converted["_Frame8"]

Converted["_TextLabel1"].Font = Enum.Font.SourceSans
Converted["_TextLabel1"].Text = "LocalScript"
Converted["_TextLabel1"].TextColor3 = Color3.fromRGB(255, 0, 0)
Converted["_TextLabel1"].TextScaled = true
Converted["_TextLabel1"].TextSize = 14
Converted["_TextLabel1"].TextWrapped = true
Converted["_TextLabel1"].BackgroundColor3 = Color3.fromRGB(255, 0, 4.000000236555934)
Converted["_TextLabel1"].BackgroundTransparency = 1
Converted["_TextLabel1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_TextLabel1"].BorderSizePixel = 0
Converted["_TextLabel1"].Position = UDim2.new(0, 0, 0.897058845, 0)
Converted["_TextLabel1"].Size = UDim2.new(1, 0, 0.100000001, 0)
Converted["_TextLabel1"].Parent = Converted["_Frame8"]

Converted["_TextButton17"].Font = Enum.Font.SourceSans
Converted["_TextButton17"].Text = "Destroy()"
Converted["_TextButton17"].TextColor3 = Color3.fromRGB(0, 255, 255)
Converted["_TextButton17"].TextScaled = true
Converted["_TextButton17"].TextSize = 14
Converted["_TextButton17"].TextWrapped = true
Converted["_TextButton17"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton17"].BackgroundTransparency = 1
Converted["_TextButton17"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_TextButton17"].BorderSizePixel = 0
Converted["_TextButton17"].Position = UDim2.new(0, 0, 0.220588237, 0)
Converted["_TextButton17"].Size = UDim2.new(1, 0, 0.100000001, 0)
Converted["_TextButton17"].Parent = Converted["_Frame8"]

Converted["_TextButton18"].Font = Enum.Font.SourceSans
Converted["_TextButton18"].Text = "Close"
Converted["_TextButton18"].TextColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton18"].TextSize = 14
Converted["_TextButton18"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton18"].BackgroundTransparency = 1
Converted["_TextButton18"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_TextButton18"].BorderSizePixel = 0
Converted["_TextButton18"].Position = UDim2.new(0.897804499, 0, 0.0888656527, 0)
Converted["_TextButton18"].Size = UDim2.new(0.0500000007, 0, 0.0500000007, 0)
Converted["_TextButton18"].Parent = Converted["_Frame"]

Converted["_Magic Open"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Magic Open"].BackgroundTransparency = 1
Converted["_Magic Open"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_Magic Open"].BorderSizePixel = 0
Converted["_Magic Open"].Position = UDim2.new(0.474385768, 0, 0.0294729508, 0)
Converted["_Magic Open"].Size = UDim2.new(0.0500000007, 0, 0.0500000007, 0)
Converted["_Magic Open"].Visible = false
Converted["_Magic Open"].Name = "Magic Open"
Converted["_Magic Open"].Parent = Converted["_DevelopemtTools"]

Converted["_TextButton19"].Font = Enum.Font.SourceSans
Converted["_TextButton19"].Text = "Open"
Converted["_TextButton19"].TextColor3 = Color3.fromRGB(255, 0, 0)
Converted["_TextButton19"].TextScaled = true
Converted["_TextButton19"].TextSize = 14
Converted["_TextButton19"].TextWrapped = true
Converted["_TextButton19"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TextButton19"].BackgroundTransparency = 1
Converted["_TextButton19"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_TextButton19"].BorderSizePixel = 0
Converted["_TextButton19"].Size = UDim2.new(1, 0, 1, 0)
Converted["_TextButton19"].Parent = Converted["_Magic Open"]

-- Fake Module Scripts:

local fake_module_scripts = {}


-- Fake Local Scripts:

local function EWQDQR_fake_script() -- Fake Script: StarterGui.DevelopemtTools.Frame.MainFrame1.TextButton.LocalScript
    local script = Instance.new("LocalScript")
    script.Name = "LocalScript"
    script.Parent = Converted["_TextButton"]
    local req = require
    local require = function(obj)
        local fake = fake_module_scripts[obj]
        if fake then
            return fake()
        end
        return req(obj)
    end

	local function Icheated()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/dex.lua"))()
	end
	
	script.Parent.MouseButton1Click:Connect(Icheated)
end
local function RCRSJ_fake_script() -- Fake Script: StarterGui.DevelopemtTools.Frame.MainFrame1.TextButton.LocalScript
    local script = Instance.new("LocalScript")
    script.Name = "LocalScript"
    script.Parent = Converted["_TextButton1"]
    local req = require
    local require = function(obj)
        local fake = fake_module_scripts[obj]
        if fake then
            return fake()
        end
        return req(obj)
    end

	local function Iloveyou()
		loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
	end
	
	script.Parent.MouseButton1Click:Connect(Iloveyou)
end
local function NIZYILR_fake_script() -- Fake Script: StarterGui.DevelopemtTools.Frame.MainFrame1.TextButton.LocalScript
    local script = Instance.new("LocalScript")
    script.Name = "LocalScript"
    script.Parent = Converted["_TextButton2"]
    local req = require
    local require = function(obj)
        local fake = fake_module_scripts[obj]
        if fake then
            return fake()
        end
        return req(obj)
    end

	local function Pos()
		-- Create a ScreenGui
		local screenGui = Instance.new("ScreenGui")
		screenGui.Parent = game.Players.LocalPlayer.PlayerGui
	
		-- Create a Frame
		local frame = Instance.new("Frame")
		frame.Size = UDim2.new(0.06, 0, 0.05, 0)
		frame.Position = UDim2.new(0.47, 0, 0.1, 0)
		frame.BackgroundColor3 = Color3.new(1, 1, 1)
		frame.BackgroundTransparency = 1
		frame.Parent = screenGui
	
		-- Create a Button
		local button = Instance.new("TextButton")
		button.Size = UDim2.new(1, 0, 1, 0)
		button.BackgroundColor3 = Color3.new(0.5, 0.5, 0.5)
		button.Text = "Copy Pos"
		button.Parent = frame
	
		-- Function to be called when the button is clicked
		local function onButtonClick()
			setclipboard(tostring(game.Players.LocalPlayer.Character.HumanoidRootPart.Position))
		end
	
		-- Connect the function to the MouseButton1Click event of the button
		button.MouseButton1Click:Connect(onButtonClick)
	end
	
	script.Parent.MouseButton1Click:Connect(Pos)
end
local function ZJMV_fake_script() -- Fake Script: StarterGui.DevelopemtTools.Frame.MainFrame1.TextButton.LocalScript
    local script = Instance.new("LocalScript")
    script.Name = "LocalScript"
    script.Parent = Converted["_TextButton3"]
    local req = require
    local require = function(obj)
        local fake = fake_module_scripts[obj]
        if fake then
            return fake()
        end
        return req(obj)
    end

	local function Mag()
		local function createButton(name, parent, position, size, callback)
			local button = Instance.new("TextButton")
			button.Name = name
			button.Parent = parent
			button.Position = position
			button.TextScaled = true
			button.Size = size
			button.Text = name
			button.MouseButton1Click:Connect(callback)
		end
	
		local screenGui = Instance.new("ScreenGui")
		screenGui.Parent = game.Players.LocalPlayer.PlayerGui
	
		local frame = Instance.new("Frame")
		frame.Name = "MyUI"
		frame.Parent = screenGui
		frame.Size = UDim2.new(0.2, 0, 0.1, 0)
		frame.Position = UDim2.new(0.39, 0, 0, 0)
		frame.BackgroundColor3 = Color3.new(0, 0, 0)
		frame.BackgroundTransparency = 0.5
	
		local firstPosition = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character.HumanoidRootPart.Position
		local secondPosition = Vector3.new(0, 0, 0)  -- Set a different position for the secondPosition
	
		createButton("Copy First Pos", frame, UDim2.new(0, 0, 0, 0), UDim2.new(0.3, 0, 1, 0), function()
			firstPosition = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character.HumanoidRootPart.Position
			if firstPosition then
				print("First Position Copied:", firstPosition)
			else
				print("Character or HumanoidRootPart not found.")
			end
		end)
	
		createButton("Copy Second Pos", frame, UDim2.new(0.4, 0, 0, 0), UDim2.new(0.3, 0, 1, 0), function()
			secondPosition = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character.HumanoidRootPart.Position
			print("Second Position Copied:", secondPosition)
		end)
	
		createButton("Calculate Magnitude", frame, UDim2.new(0.8, 0, 0, 0), UDim2.new(0.3, 0, 1, 0), function()
			local magnitude = (firstPosition - secondPosition).Magnitude
			print("Magnitude Between Positions:", magnitude)
			setclipboard(magnitude)
		end)
	end
	
	script.Parent.MouseButton1Click:Connect(Mag)
end
local function XWCK_fake_script() -- Fake Script: StarterGui.DevelopemtTools.Frame.MainFrame1.TextButton.LocalScript
    local script = Instance.new("LocalScript")
    script.Name = "LocalScript"
    script.Parent = Converted["_TextButton4"]
    local req = require
    local require = function(obj)
        local fake = fake_module_scripts[obj]
        if fake then
            return fake()
        end
        return req(obj)
    end

	local function SPY()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/78n/SimpleSpy/main/SimpleSpySource.lua"))()
	end
	
	script.Parent.MouseButton1Click:Connect(SPY)
end
local function LQABGDN_fake_script() -- Fake Script: StarterGui.DevelopemtTools.Frame.MainFrame1.TextButton.LocalScript
    local script = Instance.new("LocalScript")
    script.Name = "LocalScript"
    script.Parent = Converted["_TextButton5"]
    local req = require
    local require = function(obj)
        local fake = fake_module_scripts[obj]
        if fake then
            return fake()
        end
        return req(obj)
    end

	local function Iamgay()
		local owner = "Upbolt"
		local branch = "revision"
	
		local function webImport(file)
			return loadstring(game:HttpGetAsync(("https://raw.githubusercontent.com/%s/Hydroxide/%s/%s.lua"):format(owner, branch, file)), file .. '.lua')()
		end
	
		webImport("init")
		webImport("ui/main")
	end
	
	script.Parent.MouseButton1Click:Connect(Iamgay)
end
local function AUJBQLV_fake_script() -- Fake Script: StarterGui.DevelopemtTools.Frame.MainFrame1.TextButton.LocalScript
    local script = Instance.new("LocalScript")
    script.Name = "LocalScript"
    script.Parent = Converted["_TextButton6"]
    local req = require
    local require = function(obj)
        local fake = fake_module_scripts[obj]
        if fake then
            return fake()
        end
        return req(obj)
    end

	local function UNC()
		local passes, fails, undefined = 0, 0, 0
		local running = 0
	
		local function getGlobal(path)
			local value = getfenv(0)
	
			while value ~= nil and path ~= "" do
				local name, nextValue = string.match(path, "^([^.]+)%.?(.*)$")
				value = value[name]
				path = nextValue
			end
	
			return value
		end
	
		local function test(name, aliases, callback)
			running = running + 1
	
			task.spawn(function()
				if not callback then
					print("⏺️ " .. name)
				elseif not getGlobal(name) then
					fails = fails + 1
					warn("⛔ " .. name)
				else
					local success, message = pcall(callback)
	
					if success then
						passes = passes + 1
						print("✅ " .. name .. (message and " • " .. message or ""))
					else
						fails = fails + 1
						warn("⛔ " .. name .. " failed: " .. message)
					end
				end
	
				local undefinedAliases = {}
	
				for _, alias in ipairs(aliases) do
					if getGlobal(alias) == nil then
						table.insert(undefinedAliases, alias)
					end
				end
	
				if #undefinedAliases > 0 then
					undefined = undefined + 1
					warn("⚠️ " .. table.concat(undefinedAliases, ", "))
				end
	
				running = running - 1
			end)
		end
	
		-- Header and summary
	
		print("\n")
	
		print("UNC Environment Check")
		print("✅ - Pass, ⛔ - Fail, ⏺️ - No test, ⚠️ - Missing aliases\n")
	
		task.defer(function()
			repeat task.wait() until running == 0
	
			local rate = math.round(passes / (passes + fails) * 100)
			local outOf = passes .. " out of " .. (passes + fails)
	
			print("\n")
	
			print("UNC Summary")
			print("✅ Tested with a " .. rate .. "% success rate (" .. outOf .. ")")
			print("⛔ " .. fails .. " tests failed")
			print("⚠️ " .. undefined .. " globals are missing aliases")
		end)
	
		-- Cache
	
		test("cache.invalidate", {}, function()
			local container = Instance.new("Folder")
			local part = Instance.new("Part", container)
			cache.invalidate(container:FindFirstChild("Part"))
			assert(part ~= container:FindFirstChild("Part"), "Reference `part` could not be invalidated")
		end)
	
		test("cache.iscached", {}, function()
			local part = Instance.new("Part")
			assert(cache.iscached(part), "Part should be cached")
			cache.invalidate(part)
			assert(not cache.iscached(part), "Part should not be cached")
		end)
	
		test("cache.replace", {}, function()
			local part = Instance.new("Part")
			local fire = Instance.new("Fire")
			cache.replace(part, fire)
			assert(part ~= fire, "Part was not replaced with Fire")
		end)
	
		test("cloneref", {}, function()
			local part = Instance.new("Part")
			local clone = cloneref(part)
			assert(part ~= clone, "Clone should not be equal to original")
			clone.Name = "Test"
			assert(part.Name == "Test", "Clone should have updated the original")
		end)
	
		test("compareinstances", {}, function()
			local part = Instance.new("Part")
			local clone = cloneref(part)
			assert(part ~= clone, "Clone should not be equal to original")
			assert(compareinstances(part, clone), "Clone should be equal to original when using compareinstances()")
		end)
	
		-- Closures
	
		local function shallowEqual(t1, t2)
			if t1 == t2 then
				return true
			end
	
			local UNIQUE_TYPES = {
				["function"] = true,
				["table"] = true,
				["userdata"] = true,
				["thread"] = true,
			}
	
			for k, v in pairs(t1) do
				if UNIQUE_TYPES[type(v)] then
					if type(t2[k]) ~= type(v) then
						return false
					end
				elseif t2[k] ~= v then
					return false
				end
			end
	
			for k, v in pairs(t2) do
				if UNIQUE_TYPES[type(v)] then
					if type(t2[k]) ~= type(v) then
						return false
					end
				elseif t1[k] ~= v then
					return false
				end
			end
	
			return true
		end
	
		test("checkcaller", {}, function()
			assert(checkcaller(), "Main scope should return true")
		end)
	
		test("clonefunction", {}, function()
			local function test()
				return "success"
			end
			local copy = clonefunction(test)
			assert(test() == copy(), "The clone should return the same value as the original")
			assert(test ~= copy, "The clone should not be equal to the original")
		end)
	
		test("getcallingscript", {})
	
		test("getscriptclosure", {"getscriptfunction"}, function()
			local module = game:GetService("CoreGui").RobloxGui.Modules.Common.Constants
			local constants = getrenv().require(module)
			local generated = getscriptclosure(module)()
			assert(constants ~= generated, "Generated module should not match the original")
			assert(shallowEqual(constants, generated), "Generated constant table should be shallow equal to the original")
		end)
	
		test("hookfunction", {"replaceclosure"}, function()
			local function test()
				return true
			end
			local ref = hookfunction(test, function()
				return false
			end)
			assert(test() == false, "Function should return false")
			assert(ref() == true, "Original function should return true")
			assert(test ~= ref, "Original function should not be same as the reference")
		end)
	
		test("iscclosure", {}, function()
			assert(iscclosure(print) == true, "Function 'print' should be a C closure")
			assert(iscclosure(function() end) == false, "Executor function should not be a C closure")
		end)
	
		test("islclosure", {}, function()
			assert(islclosure(print) == false, "Function 'print' should not be a Lua closure")
			assert(islclosure(function() end) == true, "Executor function should be a Lua closure")
		end)
	
		test("isexecutorclosure", {"checkclosure", "isourclosure"}, function()
			assert(isexecutorclosure(isexecutorclosure) == true, "Did not return true for an executor global")
			assert(isexecutorclosure(newcclosure(function() end)) == true, "Did not return true for an executor C closure")
			assert(isexecutorclosure(function() end) == true, "Did not return true for an executor Luau closure")
			assert(isexecutorclosure(print) == false, "Did not return false for a Roblox global")
		end)
	
		test("loadstring", {}, function()
			local animate = game:GetService("Players").LocalPlayer.Character.Animate
			local bytecode = getscriptbytecode(animate)
			local func = loadstring(bytecode)
			assert(type(func) ~= "function", "Luau bytecode should not be loadable!")
			assert(assert(loadstring("return ... + 1"))(1) == 2, "Failed to do simple math")
			assert(type(select(2, loadstring("f"))) == "string", "Loadstring did not return anything for a compiler error")
		end)
	
		test("newcclosure", {}, function()
			local function test()
				return true
			end
			local testC = newcclosure(test)
			assert(test() == testC(), "New C closure should return the same value as the original")
			assert(test ~= testC, "New C closure should not be same as the original")
			assert(iscclosure(testC), "New C closure should be a C closure")
		end)
	
		-- Console
	
		test("rconsoleclear", {"consoleclear"})
	
		test("rconsolecreate", {"consolecreate"})
	
		test("rconsoledestroy", {"consoledestroy"})
	
		test("rconsoleinput", {"consoleinput"})
	
		test("rconsoleprint", {"consoleprint"})
	
		test("rconsolesettitle", {"rconsolename", "consolesettitle"})
	
		-- Crypt
	
		test("crypt.base64encode", {"crypt.base64.encode", "crypt.base64_encode", "base64.encode", "base64_encode"}, function()
			assert(crypt.base64encode("test") == "dGVzdA==", "Base64 encoding failed")
		end)
	
		test("crypt.base64decode", {"crypt.base64.decode", "crypt.base64_decode", "base64.decode", "base64_decode"}, function()
			assert(crypt.base64decode("dGVzdA==") == "test", "Base64 decoding failed")
		end)
	
		test("crypt.encrypt", {}, function()
			local key = crypt.generatekey()
			local encrypted, iv = crypt.encrypt("test", key, nil, "CBC")
			assert(iv, "crypt.encrypt should return an IV")
			local decrypted = crypt.decrypt(encrypted, key, iv, "CBC")
			assert(decrypted == "test", "Failed to decrypt raw string from encrypted data")
		end)
	
		test("crypt.decrypt", {}, function()
			local key, iv = crypt.generatekey(), crypt.generatekey()
			local encrypted = crypt.encrypt("test", key, iv, "CBC")
			local decrypted = crypt.decrypt(encrypted, key, iv, "CBC")
			assert(decrypted == "test", "Failed to decrypt raw string from encrypted data")
		end)
	
		test("crypt.generatebytes", {}, function()
			local size = math.random(10, 100)
			local bytes = crypt.generatebytes(size)
			assert(#crypt.base64decode(bytes) == size, "The decoded result should be " .. size .. " bytes long (got " .. #crypt.base64decode(bytes) .. " decoded, " .. #bytes .. " raw)")
		end)
	
		test("crypt.generatekey", {}, function()
			local key = crypt.generatekey()
			assert(#crypt.base64decode(key) == 32, "Generated key should be 32 bytes long when decoded")
		end)
	
		test("crypt.hash", {}, function()
			local algorithms = {'sha1', 'sha384', 'sha512', 'md5', 'sha256', 'sha3-224', 'sha3-256', 'sha3-512'}
			for _, algorithm in ipairs(algorithms) do
				local hash = crypt.hash("test", algorithm)
				assert(hash, "crypt.hash on algorithm '" .. algorithm .. "' should return a hash")
			end
		end)
	
		--- Debug
	
		test("debug.getconstant", {}, function()
			local function test()
				print("Hello, world!")
			end
			assert(debug.getconstant(test, 1) == "print", "First constant must be print")
			assert(debug.getconstant(test, 2) == nil, "Second constant must be nil")
			assert(debug.getconstant(test, 3) == "Hello, world!", "Third constant must be 'Hello, world!'")
		end)
	
		test("debug.getconstants", {}, function()
			local function test()
				local num = 5000 .. 50000
				print("Hello, world!", num, warn)
			end
			local constants = debug.getconstants(test)
			assert(constants[1] == 50000, "First constant must be 50000")
			assert(constants[2] == "print", "Second constant must be print")
			assert(constants[3] == nil, "Third constant must be nil")
			assert(constants[4] == "Hello, world!", "Fourth constant must be 'Hello, world!'")
			assert(constants[5] == "warn", "Fifth constant must be warn")
		end)
	
		test("debug.getinfo", {}, function()
			local types = {
				source = "string",
				short_src = "string",
				func = "function",
				what = "string",
				currentline = "number",
				name = "string",
				nups = "number",
				numparams = "number",
				is_vararg = "number",
			}
			local function test(...)
				print(...)
			end
			local info = debug.getinfo(test)
			for k, v in pairs(types) do
				assert(info[k] ~= nil, "Did not return a table with a '" .. k .. "' field")
				assert(type(info[k]) == v, "Did not return a table with " .. k .. " as a " .. v .. " (got " .. type(info[k]) .. ")")
			end
		end)
	
		test("debug.getproto", {}, function()
			local function test()
				local function proto()
					return true
				end
			end
			local proto = debug.getproto(test, 1, true)[1]
			local realproto = debug.getproto(test, 1)
			assert(proto, "Failed to get the inner function")
			assert(proto() == true, "The inner function did not return anything")
			if not realproto() then
				return "Proto return values are disabled on this executor"
			end
		end)
	
		test("debug.getprotos", {}, function()
			local function test()
				local function _1()
					return true
				end
				local function _2()
					return true
				end
				local function _3()
					return true
				end
			end
			for i in ipairs(debug.getprotos(test)) do
				local proto = debug.getproto(test, i, true)[1]
				local realproto = debug.getproto(test, i)
				assert(proto(), "Failed to get inner function " .. i)
				if not realproto() then
					return "Proto return values are disabled on this executor"
				end
			end
		end)
	
		test("debug.getstack", {}, function()
			local _ = "a" .. "b"
			assert(debug.getstack(1, 1) == "ab", "The first item in the stack should be 'ab'")
			assert(debug.getstack(1)[1] == "ab", "The first item in the stack table should be 'ab'")
		end)
	
		test("debug.getupvalue", {}, function()
			local upvalue = function() end
			local function test()
				print(upvalue)
			end
			assert(debug.getupvalue(test, 1) == upvalue, "Unexpected value returned from debug.getupvalue")
		end)
	
		test("debug.getupvalues", {}, function()
			local upvalue = function() end
			local function test()
				print(upvalue)
			end
			local upvalues = debug.getupvalues(test)
			assert(upvalues[1] == upvalue, "Unexpected value returned from debug.getupvalues")
		end)
	
		test("debug.setconstant", {}, function()
			local function test()
				return "fail"
			end
			debug.setconstant(test, 1, "success")
			assert(test() == "success", "debug.setconstant did not set the first constant")
		end)
	
		test("debug.setstack", {}, function()
			local function test()
				return "fail", debug.setstack(1, 1, "success")
			end
			assert(test() == "success", "debug.setstack did not set the first stack item")
		end)
	
		test("debug.setupvalue", {}, function()
			local function upvalue()
				return "fail"
			end
			local function test()
				return upvalue()
			end
			debug.setupvalue(test, 1, function()
				return "success"
			end)
			assert(test() == "success", "debug.setupvalue did not set the first upvalue")
		end)
	
		-- Filesystem
	
		if isfolder and makefolder and delfolder then
			if isfolder(".tests") then
				delfolder(".tests")
			end
			makefolder(".tests")
		end
	
		test("readfile", {}, function()
			writefile(".tests/readfile.txt", "success")
			assert(readfile(".tests/readfile.txt") == "success", "Did not return the contents of the file")
		end)
	
		test("listfiles", {}, function()
			makefolder(".tests/listfiles")
			writefile(".tests/listfiles/test_1.txt", "success")
			writefile(".tests/listfiles/test_2.txt", "success")
			local files = listfiles(".tests/listfiles")
			assert(#files == 2, "Did not return the correct number of files")
			assert(isfile(files[1]), "Did not return a file path")
			assert(readfile(files[1]) == "success", "Did not return the correct files")
			makefolder(".tests/listfiles_2")
			makefolder(".tests/listfiles_2/test_1")
			makefolder(".tests/listfiles_2/test_2")
			local folders = listfiles(".tests/listfiles_2")
			assert(#folders == 2, "Did not return the correct number of folders")
			assert(isfolder(folders[1]), "Did not return a folder path")
		end)
	
		test("writefile", {}, function()
			writefile(".tests/writefile.txt", "success")
			assert(readfile(".tests/writefile.txt") == "success", "Did not write the file")
			local requiresFileExt = pcall(function()
				writefile(".tests/writefile", "success")
				assert(isfile(".tests/writefile.txt"))
			end)
			if not requiresFileExt then
				return "This executor requires a file extension in writefile"
			end
		end)
	
		test("makefolder", {}, function()
			makefolder(".tests/makefolder")
			assert(isfolder(".tests/makefolder"), "Did not create the folder")
		end)
	
		test("appendfile", {}, function()
			writefile(".tests/appendfile.txt", "su")
			appendfile(".tests/appendfile.txt", "cce")
			appendfile(".tests/appendfile.txt", "ss")
			assert(readfile(".tests/appendfile.txt") == "success", "Did not append the file")
		end)
	
		test("isfile", {}, function()
			writefile(".tests/isfile.txt", "success")
			assert(isfile(".tests/isfile.txt") == true, "Did not return true for a file")
			assert(isfile(".tests") == false, "Did not return false for a folder")
			assert(isfile(".tests/doesnotexist.exe") == false, "Did not return false for a nonexistent path (got " .. tostring(isfile(".tests/doesnotexist.exe")) .. ")")
		end)
	
		test("isfolder", {}, function()
			assert(isfolder(".tests") == true, "Did not return false for a folder")
			assert(isfolder(".tests/doesnotexist.exe") == false, "Did not return false for a nonexistent path (got " .. tostring(isfolder(".tests/doesnotexist.exe")) .. ")")
		end)
	
		test("delfolder", {}, function()
			makefolder(".tests/delfolder")
			delfolder(".tests/delfolder")
			assert(isfolder(".tests/delfolder") == false, "Failed to delete folder (isfolder = " .. tostring(isfolder(".tests/delfolder")) .. ")")
		end)
	
		test("delfile", {}, function()
			writefile(".tests/delfile.txt", "Hello, world!")
			delfile(".tests/delfile.txt")
			assert(isfile(".tests/delfile.txt") == false, "Failed to delete file (isfile = " .. tostring(isfile(".tests/delfile.txt")) .. ")")
		end)
	
		test("loadfile", {}, function()
			writefile(".tests/loadfile.txt", "return ... + 1")
			assert(assert(loadfile(".tests/loadfile.txt"))(1) == 2, "Failed to load a file with arguments")
			writefile(".tests/loadfile.txt", "f")
			local callback, err = loadfile(".tests/loadfile.txt")
			assert(err and not callback, "Did not return an error message for a compiler error")
		end)
	
		test("dofile", {})
	
		-- Input
	
		test("isrbxactive", {"isgameactive"}, function()
			assert(type(isrbxactive()) == "boolean", "Did not return a boolean value")
		end)
	
		test("mouse1click", {})
	
		test("mouse1press", {})
	
		test("mouse1release", {})
	
		test("mouse2click", {})
	
		test("mouse2press", {})
	
		test("mouse2release", {})
	
		test("mousemoveabs", {})
	
		test("mousemoverel", {})
	
		test("mousescroll", {})
	
		-- Instances
	
		test("fireclickdetector", {}, function()
			local detector = Instance.new("ClickDetector")
			fireclickdetector(detector, 50, "MouseHoverEnter")
		end)
	
		test("getcallbackvalue", {}, function()
			local bindable = Instance.new("BindableFunction")
			local function test()
			end
			bindable.OnInvoke = test
			assert(getcallbackvalue(bindable, "OnInvoke") == test, "Did not return the correct value")
		end)
	
		test("getconnections", {}, function()
			local types = {
				Enabled = "boolean",
				ForeignState = "boolean",
				LuaConnection = "boolean",
				Function = "function",
				Thread = "thread",
				Fire = "function",
				Defer = "function",
				Disconnect = "function",
				Disable = "function",
				Enable = "function",
			}
			local bindable = Instance.new("BindableEvent")
			bindable.Event:Connect(function() end)
			local connection = getconnections(bindable.Event)[1]
			for k, v in pairs(types) do
				assert(connection[k] ~= nil, "Did not return a table with a '" .. k .. "' field")
				assert(type(connection[k]) == v, "Did not return a table with " .. k .. " as a " .. v .. " (got " .. type(connection[k]) .. ")")
			end
		end)
	
		test("getcustomasset", {}, function()
			writefile(".tests/getcustomasset.txt", "success")
			local contentId = getcustomasset(".tests/getcustomasset.txt")
			assert(type(contentId) == "string", "Did not return a string")
			assert(#contentId > 0, "Returned an empty string")
			assert(string.match(contentId, "rbxasset://") == "rbxasset://", "Did not return an rbxasset url")
		end)
	
		test("gethiddenproperty", {}, function()
			local fire = Instance.new("Fire")
			local property, isHidden = gethiddenproperty(fire, "size_xml")
			assert(property == 5, "Did not return the correct value")
			assert(isHidden == true, "Did not return whether the property was hidden")
		end)
	
		test("sethiddenproperty", {}, function()
			local fire = Instance.new("Fire")
			local hidden = sethiddenproperty(fire, "size_xml", 10)
			assert(hidden, "Did not return true for the hidden property")
			assert(gethiddenproperty(fire, "size_xml") == 10, "Did not set the hidden property")
		end)
	
		test("gethui", {}, function()
			assert(typeof(gethui()) == "Instance", "Did not return an Instance")
		end)
	
		test("getinstances", {}, function()
			assert(getinstances()[1]:IsA("Instance"), "The first value is not an Instance")
		end)
	
		test("getnilinstances", {}, function()
			assert(getnilinstances()[1]:IsA("Instance"), "The first value is not an Instance")
			assert(getnilinstances()[1].Parent == nil, "The first value is not parented to nil")
		end)
	
		test("isscriptable", {}, function()
			local fire = Instance.new("Fire")
			assert(isscriptable(fire, "size_xml") == false, "Did not return false for a non-scriptable property (size_xml)")
			assert(isscriptable(fire, "Size") == true, "Did not return true for a scriptable property (Size)")
		end)
	
		test("setscriptable", {}, function()
			local fire = Instance.new("Fire")
			local wasScriptable = setscriptable(fire, "size_xml", true)
			assert(wasScriptable == false, "Did not return false for a non-scriptable property (size_xml)")
			assert(isscriptable(fire, "size_xml") == true, "Did not set the scriptable property")
			fire = Instance.new("Fire")
			assert(isscriptable(fire, "size_xml") == false, "⚠️⚠️ setscriptable persists between unique instances ⚠️⚠️")
		end)
	
		test("setrbxclipboard", {})
	
		-- Metatable
	
		test("getrawmetatable", {}, function()
			local metatable = { __metatable = "Locked!" }
			local object = setmetatable({}, metatable)
			assert(getrawmetatable(object) == metatable, "Did not return the metatable")
		end)
	
		test("hookmetamethod", {}, function()
			local object = setmetatable({}, { __index = newcclosure(function() return false end), __metatable = "Locked!" })
			local ref = hookmetamethod(object, "__index", function() return true end)
			assert(object.test == true, "Failed to hook a metamethod and change the return value")
			assert(ref() == false, "Did not return the original function")
		end)
	
		test("getnamecallmethod", {}, function()
			local method
			local ref
			ref = hookmetamethod(game, "__namecall", function(...)
				if not method then
					method = getnamecallmethod()
				end
				return ref(...)
			end)
			game:GetService("Lighting")
			assert(method == "GetService", "Did not get the correct method (GetService)")
		end)
	
		test("isreadonly", {}, function()
			local object = {}
			table.freeze(object)
			assert(isreadonly(object), "Did not return true for a read-only table")
		end)
	
		test("setrawmetatable", {}, function()
			local object = setmetatable({}, { __index = function() return false end, __metatable = "Locked!" })
			local objectReturned = setrawmetatable(object, { __index = function() return true end })
			assert(object, "Did not return the original object")
			assert(object.test == true, "Failed to change the metatable")
			if objectReturned then
				return objectReturned == object and "Returned the original object" or "Did not return the original object"
			end
		end)
	
		test("setreadonly", {}, function()
			local object = { success = false }
			table.freeze(object)
			setreadonly(object, false)
			object.success = true
			assert(object.success, "Did not allow the table to be modified")
		end)
	
		-- Miscellaneous
	
		test("identifyexecutor", {"getexecutorname"}, function()
			local name, version = identifyexecutor()
			assert(type(name) == "string", "Did not return a string for the name")
			return type(version) == "string" and "Returns version as a string" or "Does not return version"
		end)
	
		test("lz4compress", {}, function()
			local raw = "Hello, world!"
			local compressed = lz4compress(raw)
			assert(type(compressed) == "string", "Compression did not return a string")
			assert(lz4decompress(compressed, #raw) == raw, "Decompression did not return the original string")
		end)
	
		test("lz4decompress", {}, function()
			local raw = "Hello, world!"
			local compressed = lz4compress(raw)
			assert(type(compressed) == "string", "Compression did not return a string")
			assert(lz4decompress(compressed, #raw) == raw, "Decompression did not return the original string")
		end)
	
		test("messagebox", {})
	
		test("queue_on_teleport", {"queueonteleport"})
	
		test("request", {"http.request", "http_request"}, function()
			local response = request({
				Url = "https://httpbin.org/user-agent",
				Method = "GET",
			})
			assert(type(response) == "table", "Response must be a table")
			assert(response.StatusCode == 200, "Did not return a 200 status code")
			local data = game:GetService("HttpService"):JSONDecode(response.Body)
			assert(type(data) == "table" and type(data["user-agent"]) == "string", "Did not return a table with a user-agent key")
			return "User-Agent: " .. data["user-agent"]
		end)
	
		test("setclipboard", {"toclipboard"})
	
		test("setfpscap", {}, function()
			local renderStepped = game:GetService("RunService").RenderStepped
			local function step()
				renderStepped:Wait()
				local sum = 0
				for _ = 1, 5 do
					sum = sum + 1 / renderStepped:Wait()
				end
				return math.round(sum / 5)
			end
			setfpscap(60)
			local step60 = step()
			setfpscap(0)
			local step0 = step()
			return step60 .. "fps @60 • " .. step0 .. "fps @0"
		end)
	
		-- Scripts
	
		test("getgc", {}, function()
			local gc = getgc()
			assert(type(gc) == "table", "Did not return a table")
			assert(#gc > 0, "Did not return a table with any values")
		end)
	
		test("getgenv", {}, function()
			getgenv().__TEST_GLOBAL = true
			assert(__TEST_GLOBAL, "Failed to set a global variable")
			getgenv().__TEST_GLOBAL = nil
		end)
	
		test("getloadedmodules", {}, function()
			local modules = getloadedmodules()
			assert(type(modules) == "table", "Did not return a table")
			assert(#modules > 0, "Did not return a table with any values")
			assert(typeof(modules[1]) == "Instance", "First value is not an Instance")
			assert(modules[1]:IsA("ModuleScript"), "First value is not a ModuleScript")
		end)
	
		test("getrenv", {}, function()
			assert(_G ~= getrenv()._G, "The variable _G in the executor is identical to _G in the game")
		end)
	
		test("getrunningscripts", {}, function()
			local scripts = getrunningscripts()
			assert(type(scripts) == "table", "Did not return a table")
			assert(#scripts > 0, "Did not return a table with any values")
			assert(typeof(scripts[1]) == "Instance", "First value is not an Instance")
			assert(scripts[1]:IsA("ModuleScript") or scripts[1]:IsA("LocalScript"), "First value is not a ModuleScript or LocalScript")
		end)
	
		test("getscriptbytecode", {"dumpstring"}, function()
			local animate = game:GetService("Players").LocalPlayer.Character.Animate
			local bytecode = getscriptbytecode(animate)
			assert(type(bytecode) == "string", "Did not return a string for Character.Animate (a " .. animate.ClassName .. ")")
		end)
	
		test("getscripthash", {}, function()
			local animate = game:GetService("Players").LocalPlayer.Character.Animate:Clone()
			local hash = getscripthash(animate)
			local source = animate.Source
			animate.Source = "print('Hello, world!')"
			task.defer(function()
				animate.Source = source
			end)
			local newHash = getscripthash(animate)
			assert(hash ~= newHash, "Did not return a different hash for a modified script")
			assert(newHash == getscripthash(animate), "Did not return the same hash for a script with the same source")
		end)
	
		test("getscripts", {}, function()
			local scripts = getscripts()
			assert(type(scripts) == "table", "Did not return a table")
			assert(#scripts > 0, "Did not return a table with any values")
			assert(typeof(scripts[1]) == "Instance", "First value is not an Instance")
			assert(scripts[1]:IsA("ModuleScript") or scripts[1]:IsA("LocalScript"), "First value is not a ModuleScript or LocalScript")
		end)
	
		test("getsenv", {}, function()
			local animate = game:GetService("Players").LocalPlayer.Character.Animate
			local env = getsenv(animate)
			assert(type(env) == "table", "Did not return a table for Character.Animate (a " .. animate.ClassName .. ")")
			assert(env.script == animate, "The script global is not identical to Character.Animate")
		end)
	
		test("getthreadidentity", {"getidentity", "getthreadcontext"}, function()
			assert(type(getthreadidentity()) == "number", "Did not return a number")
		end)
	
		test("setthreadidentity", {"setidentity", "setthreadcontext"}, function()
			setthreadidentity(3)
			assert(getthreadidentity() == 3, "Did not set the thread identity")
		end)
	
		-- Drawing
	
		test("Drawing", {})
	
		test("Drawing.new", {}, function()
			local drawing = Drawing.new("Square")
			drawing.Visible = false
			local canDestroy = pcall(function()
				drawing:Destroy()
			end)
			assert(canDestroy, "Drawing:Destroy() should not throw an error")
		end)
	
		test("Drawing.Fonts", {}, function()
			assert(Drawing.Fonts.UI == 0, "Did not return the correct id for UI")
			assert(Drawing.Fonts.System == 1, "Did not return the correct id for System")
			assert(Drawing.Fonts.Plex == 2, "Did not return the correct id for Plex")
			assert(Drawing.Fonts.Monospace == 3, "Did not return the correct id for Monospace")
		end)
	
		test("isrenderobj", {}, function()
			local drawing = Drawing.new("Image")
			drawing.Visible = true
			assert(isrenderobj(drawing) == true, "Did not return true for an Image")
			assert(isrenderobj(newproxy()) == false, "Did not return false for a blank table")
		end)
	
		test("getrenderproperty", {}, function()
			local drawing = Drawing.new("Image")
			drawing.Visible = true
			assert(type(getrenderproperty(drawing, "Visible")) == "boolean", "Did not return a boolean value for Image.Visible")
			local success, result = pcall(function()
				return getrenderproperty(drawing, "Color")
			end)
			if not success or not result then
				return "Image.Color is not supported"
			end
		end)
	
		test("setrenderproperty", {}, function()
			local drawing = Drawing.new("Square")
			drawing.Visible = true
			setrenderproperty(drawing, "Visible", false)
			assert(drawing.Visible == false, "Did not set the value for Square.Visible")
		end)
	
		test("cleardrawcache", {}, function()
			cleardrawcache()
		end)
	
		-- WebSocket
	
		test("WebSocket", {})
	
		test("WebSocket.connect", {}, function()
			local types = {
				Send = "function",
				Close = "function",
				OnMessage = {"table", "userdata"},
				OnClose = {"table", "userdata"},
			}
			local ws = WebSocket.connect("ws://echo.websocket.events")
			assert(type(ws) == "table" or type(ws) == "userdata", "Did not return a table or userdata")
			for k, v in pairs(types) do
				if type(v) == "table" then
					assert(table.find(v, type(ws[k])), "Did not return a " .. table.concat(v, ", ") .. " for " .. k .. " (a " .. type(ws[k]) .. ")")
				else
					assert(type(ws[k]) == v, "Did not return a " .. v .. " for " .. k .. " (a " .. type(ws[k]) .. ")")
				end
			end
			ws:Close()
		end)
	end
	
	script.Parent.MouseButton1Click:Connect(UNC)
end
local function VOZQKQ_fake_script() -- Fake Script: StarterGui.DevelopemtTools.Frame.MainFrame1.TextButton.Script1
    local script = Instance.new("LocalScript")
    script.Name = "Script1"
    script.Parent = Converted["_TextButton7"]
    local req = require
    local require = function(obj)
        local fake = fake_module_scripts[obj]
        if fake then
            return fake()
        end
        return req(obj)
    end

	local selectedPose
	local function LaVert()
		function sandbox(var,func)
			local env = getfenv(func)
			local newenv = setmetatable({},{
				__index = function(self,k)
					if k=="script" then
						return var
					else
						return env[k]
					end
				end,
			})
			setfenv(func,newenv)
			return func
		end
		cors = {}
		mas = Instance.new("Model",game:GetService("Lighting"))
		Tool0 = Instance.new("Tool")
		MagicLocalScript = Instance.new("LocalScript")
		Part2 = Instance.new("Part")
		Part3 = Instance.new("Part")
		SpecialMesh4 = Instance.new("SpecialMesh")
		Tool0.Name = "SimpleS Studio"
		Tool0.Parent = mas
		MagicLocalScript.Parent = Tool0
		table.insert(cors,sandbox(MagicLocalScript,function()
			local Tool = script.Parent
	
			enabled = true
	
			local selectionBox
	
			local arcHandles
			
			selectedPose = nil
	
			local moveHandles
	
			local previousCFrame
	
			local previousDistance
	
			function onArcHandlesDown(normal)
	
				print("HandlesDown")
	
				if selectedPose then
	
					previousCFrame = selectedPose.CFrame
	
				end
	
			end
	
			function onArcHandlesDrag(axis, relativeAngle, deltaRadius)
	
				if selectedPose then
	
					local axisangle = Vector3.FromAxis(axis)
	
					axisangle = axisangle * relativeAngle
	
					selectedPose.CFrame = previousCFrame * CFrame.Angles(axisangle.X, axisangle.Y, axisangle.Z)
	
					local x, y, z = selectedPose.CFrame:toEulerAnglesXYZ()
	
					print(math.floor(math.deg(x)), math.floor(math.deg(y)), math.floor(math.deg(z)))
	
				end
	
			end
	
			function onMoveHandlesDown(normal)
	
				print("HandlesDown")
	
				if selectedPose then
	
					previousDistance = 0
	
				end
	
			end
	
			function onMoveHandlesDrag(normal, distance)
	
				if selectedPose then
	
					local delta = distance - previousDistance
	
					translation = CFrame.new(Vector3.FromNormalId(normal) * delta)
	
					selectedPose.CFrame = translation * selectedPose.CFrame
	
					previousDistance = distance
	
					print(selectedPose.Position)
	
				end
	
			end
	
			function onButton1Down(mouse)
	
				print("3DButtonDown")
	
				selectionBox.Adornee = nil
	
				arcHandles.Adornee = nil
	
				moveHandles.Adornee = nil
	
				if mouse.Target ~= nil then
	
					selectedPose = mouse.Target
	
					selectionBox.Adornee = mouse.Target
	
					arcHandles.Adornee = mouse.Target
	
					moveHandles.Adornee = mouse.Target
	
				end
	
			end
	
			function onEquippedLocal(mouse)
	
				local character = script.Parent.Parent
	
				local player = Game.Players:GetPlayerFromCharacter(character)
	
				mouse.Icon ="rbxasset://textures\\DragCursor.png"
	
				mouse.Button1Down:connect(function() onButton1Down(mouse) end)
	
				selectionBox = Instance.new("SelectionBox")
	
				selectionBox.Color = BrickColor.new("Cyan")
	
				selectionBox.Adornee = nil
	
				selectionBox.Parent = player.PlayerGui
	
				arcHandlesPart = Instance.new("Part")
	
				arcHandlesPart.Name = "ArcHandlesProxyPart"
	
				arcHandlesPart.Size = Vector3.new(2,2,2)
	
				arcHandlesPart.Parent = player.PlayerGui
	
				moveHandlesPart = Instance.new("Part")
	
				moveHandlesPart.Name = "MoveHandlesProxyPart"
	
				moveHandlesPart.Size = Vector3.new(2,2,2)
	
				moveHandlesPart.Parent = player.PlayerGui
	
				arcHandles = Instance.new("ArcHandles")
	
				arcHandles.Color = BrickColor.new("Neon orange")
	
				arcHandles.Adornee = nil
	
				arcHandles.Axes = Axes.new(Enum.Axis.X, Enum.Axis.Y, Enum.Axis.Z)
	
				arcHandles.MouseDrag:connect(onArcHandlesDrag)
	
				arcHandles.MouseButton1Down:connect(onArcHandlesDown)
	
				arcHandles.Parent = player.PlayerGui
	
				moveHandles = Instance.new("Handles")
	
				moveHandles.Style = Enum.HandlesStyle.Movement
	
				moveHandles.Color = BrickColor.new("Bright blue")
	
				moveHandles.Adornee = nil
	
				moveHandles.MouseDrag:connect(onMoveHandlesDrag)
	
				moveHandles.MouseButton1Down:connect(onMoveHandlesDown)
	
				moveHandles.Parent = player.PlayerGui
	
			end
	
			function onUnequippedLocal()
	
				selectionBox:Remove()
	
				arcHandles:Remove()
	
				moveHandles:remove()
	
			end
	
			Tool.Equipped:connect(onEquippedLocal)
	
			Tool.Unequipped:connect(onUnequippedLocal)
		end))
		Part2.Name = "Handle"
		Part2.Parent = Tool0
		Part2.CFrame = CFrame.new(-11.6290159, 6.38923359, -112.359108, 0, 0, 1, 0, 1, 0, -1, 0, 0)
		Part2.Orientation = Vector3.new(0, 90, 0)
		Part2.Position = Vector3.new(-11.629015922546387, 6.389233589172363, -112.3591079711914)
		Part2.Rotation = Vector3.new(0, 90, 0)
		Part2.Color = Color3.new(0.972549, 0.972549, 0.972549)
		Part2.Size = Vector3.new(0.0010000000474974513, 0.001000046730041504, 0.0010000000474974513)
		Part2.BrickColor = BrickColor.new("Institutional white")
		Part2.brickColor = BrickColor.new("Institutional white")
		Part3.Name = "Magic"
		Part3.Parent = Tool0
		Part3.CFrame = CFrame.new(-12.1285172, 5.78873873, -112.858604, 0, 0, 1, 0, 1, 0, -1, 0, 0)
		Part3.Orientation = Vector3.new(0, 90, 0)
		Part3.Position = Vector3.new(-12.128517150878906, 5.78873872756958, -112.85860443115234)
		Part3.Rotation = Vector3.new(0, 90, 0)
		Part3.Color = Color3.new(0.972549, 0.972549, 0.972549)
		Part3.Size = Vector3.new(1, 1.2000000476837158, 1)
		Part3.BrickColor = BrickColor.new("Institutional white")
		Part3.Elasticity = 0
		Part3.Friction = 0
		Part3.brickColor = BrickColor.new("Institutional white")
		SpecialMesh4.Parent = Part3
		SpecialMesh4.MeshId = "http://www.roblox.com/asset/?id=16171271"
		SpecialMesh4.Scale = Vector3.new(0.5, 0.5, 0.5)
		SpecialMesh4.TextureId = "http://www.roblox.com/asset/?id=16171265"
		SpecialMesh4.MeshType = Enum.MeshType.FileMesh
		for i,v in pairs(mas:GetChildren()) do
			v.Parent = workspace
			pcall(function() v:MakeJoints() end)
		end
		mas:Destroy()
		for i,v in pairs(cors) do
			spawn(function()
				pcall(v)
			end)
		end
		repeat task.wait() until game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
	
		Tool0.Parent = game.Players.LocalPlayer.Character
		if not game.CoreGui:FindFirstChild("Simple Showcase Studio") then
			local SimpleShowcase = Instance.new("ScreenGui")
			SimpleShowcase.Name = "Simple Showcase Studio"
			SimpleShowcase.Parent = game.CoreGui
			local SimpleFrame = Instance.new("Frame")
			SimpleFrame.Size = UDim2.new(0.15, 0, 0.1, 0)
			SimpleFrame.Position = UDim2.new(0.8, 0, 0, 0)
			SimpleFrame.BackgroundColor3 = Color3.new(0, 0, 0)
			SimpleFrame.Parent = SimpleShowcase
			local SimpleText = Instance.new("TextBox")
			SimpleText.Position = UDim2.new(0, 0, 0, 0)
			SimpleText.Size = UDim2.new(1, 0, 1, 0)
			SimpleText.TextColor3 = Color3.new(1, 1, 1)
			SimpleText.Parent = SimpleFrame
			
			SimpleText:GetPropertyChangedSignal("Text"):Connect(function()
				if selectedPose then
					pcall(function()
						local text = SimpleText.Text
						local numbers = {}
						for num in text:gmatch("%d+") do
							table.insert(numbers, tonumber(num))
						end
						
						if numbers[1] and numbers[2] and numbers[3] then
							local size = Vector3.new(numbers[1], numbers[2], numbers[3])
							selectedPose.Size = size
						end
					end)
				end
			end)
		end
		if not game.CoreGui:FindFirstChild("LOWQUAD") then
			pcall(function()
				local screenGui = Instance.new("ScreenGui")
				screenGui.Name = "LOWQUAD"
				screenGui.Parent = game.CoreGui
				local frame = Instance.new("Frame")
				frame.Size = UDim2.new(0.06, 0, 0.05, 0)
				frame.Position = UDim2.new(0.39, 0, 0.1, 0)
				frame.BackgroundColor3 = Color3.new(1, 1, 1)
				frame.BackgroundTransparency = 1
				frame.Parent = screenGui
				local button = Instance.new("TextButton")
				button.Size = UDim2.new(1, 0, 1, 0)
				button.BackgroundColor3 = Color3.new(0.5, 0.5, 0.5)
				button.Text = "Part"
				button.Parent = frame
				local function Ilikeyou()
					local Ilikeyou = Instance.new("Part")
					Ilikeyou.Transparency = 0
					Ilikeyou.Size = Vector3.new(1, 1, 1)
					Ilikeyou.Anchored = true
					Ilikeyou.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
					Ilikeyou.Parent = workspace
				end
	
				-- Connect the function to the MouseButton1Click event of the button
				button.MouseButton1Click:Connect(Ilikeyou)
			end)
		end
		
		while task.wait() do
			if Part3 and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
				Part3.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 7, 0)
			end
		end
	end
	
	Converted["_TextButton7"].MouseButton1Click:Connect(LaVert)
end
local function BYCZF_fake_script() -- Fake Script: StarterGui.DevelopemtTools.Frame.Tools.LocalScript
    local script = Instance.new("LocalScript")
    script.Name = "LocalScript"
    script.Parent = Converted["_Tools"]
    local req = require
    local require = function(obj)
        local fake = fake_module_scripts[obj]
        if fake then
            return fake()
        end
        return req(obj)
    end

	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.MainFrame1.Visible = true
		script.Parent.Parent.MainFrame2.Visible = false
		script.Parent.Parent.MainFrame3.Visible = false
		script.Parent.Parent.MainFrame4.Visible = false
	end)
end
local function WNYWFIW_fake_script() -- Fake Script: StarterGui.DevelopemtTools.Frame.Remote Scanner.LocalScript
    local script = Instance.new("LocalScript")
    script.Name = "LocalScript"
    script.Parent = Converted["_Remote Scanner"]
    local req = require
    local require = function(obj)
        local fake = fake_module_scripts[obj]
        if fake then
            return fake()
        end
        return req(obj)
    end

	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.MainFrame1.Visible = false
		script.Parent.Parent.MainFrame2.Visible = true
		script.Parent.Parent.MainFrame3.Visible = false
		script.Parent.Parent.MainFrame4.Visible = false
	end)
end
local function LSQPLK_fake_script() -- Fake Script: StarterGui.DevelopemtTools.Frame.Script scanner.LocalScript
    local script = Instance.new("LocalScript")
    script.Name = "LocalScript"
    script.Parent = Converted["_Script scanner"]
    local req = require
    local require = function(obj)
        local fake = fake_module_scripts[obj]
        if fake then
            return fake()
        end
        return req(obj)
    end

	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.MainFrame1.Visible = false
		script.Parent.Parent.MainFrame2.Visible = false
		script.Parent.Parent.MainFrame3.Visible = true
		script.Parent.Parent.MainFrame4.Visible = false
	end)
end
local function QHYQTWN_fake_script() -- Fake Script: StarterGui.DevelopemtTools.Frame.nil scanner.LocalScript
    local script = Instance.new("LocalScript")
    script.Name = "LocalScript"
    script.Parent = Converted["_nil scanner"]
    local req = require
    local require = function(obj)
        local fake = fake_module_scripts[obj]
        if fake then
            return fake()
        end
        return req(obj)
    end

	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.MainFrame1.Visible = false
		script.Parent.Parent.MainFrame2.Visible = false
		script.Parent.Parent.MainFrame3.Visible = false
		script.Parent.Parent.MainFrame4.Visible = true
	end)
end
local function ZNGUED_fake_script() -- Fake Script: StarterGui.DevelopemtTools.Frame.MainFrame2.Frame.TextButton.LocalScript
    local script = Instance.new("LocalScript")
    script.Name = "LocalScript"
    script.Parent = Converted["_TextButton8"]
    local req = require
    local require = function(obj)
        local fake = fake_module_scripts[obj]
        if fake then
            return fake()
        end
        return req(obj)
    end

	local Table = {}
	
	local function creation(Text , num)
		local textLabel = Instance.new("TextButton")
		textLabel.Text = Text
		textLabel.TextColor3 = Color3.new(1, 1, 1)
		textLabel.BackgroundTransparency = 1
		textLabel.Size = UDim2.new(1, 0, 0.1, 0) 
		textLabel.AnchorPoint = Vector2.new(0.5, 0.5)
		textLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
		textLabel.Font = Enum.Font.SourceSansBold
		textLabel.TextScaled = true
		textLabel.Parent = script.Parent.Parent.Parent.ScrollingFrame
		
		textLabel.MouseButton1Click:Connect(function()
			_G.SelectValueOfRemote = Table[tonumber(num)]
		end)
	end
	local function DestroyMagic()
		for _, v in pairs(script.Parent.Parent.Parent.ScrollingFrame:GetChildren()) do
			if v and v:IsA("TextButton") then
				v:Destroy()
			end
		end
	end
	
	local function KissYou()
		Table = {}
		DestroyMagic()
		task.wait()
		for i, v in pairs(game:GetDescendants()) do
			if v and v:IsA("RemoteFunction") then
				table.insert(Table, i, v:GetFullName())
				creation(tostring(v.Name), i)
				wait()
			end
		end
	end
	
	script.Parent.MouseButton1Click:Connect(KissYou)
end
local function VRCCQPU_fake_script() -- Fake Script: StarterGui.DevelopemtTools.Frame.MainFrame2.Frame.TextButton.LocalScript
    local script = Instance.new("LocalScript")
    script.Name = "LocalScript"
    script.Parent = Converted["_TextButton9"]
    local req = require
    local require = function(obj)
        local fake = fake_module_scripts[obj]
        if fake then
            return fake()
        end
        return req(obj)
    end

	script.Parent.MouseButton1Click:Connect(function()
		setclipboard(_G.SelectValueOfRemote)
	end)
end
local function CISUO_fake_script() -- Fake Script: StarterGui.DevelopemtTools.Frame.MainFrame2.Frame.TextButton.LocalScript
    local script = Instance.new("LocalScript")
    script.Name = "LocalScript"
    script.Parent = Converted["_TextButton10"]
    local req = require
    local require = function(obj)
        local fake = fake_module_scripts[obj]
        if fake then
            return fake()
        end
        return req(obj)
    end

	script.Parent.MouseButton1Click:Connect(function()
		print(_G.SelectValueOfRemote)
	end)
end
local function ZLTK_fake_script() -- Fake Script: StarterGui.DevelopemtTools.Frame.MainFrame2.Frame.TextButton.LocalScript
    local script = Instance.new("LocalScript")
    script.Name = "LocalScript"
    script.Parent = Converted["_TextButton11"]
    local req = require
    local require = function(obj)
        local fake = fake_module_scripts[obj]
        if fake then
            return fake()
        end
        return req(obj)
    end

	script.Parent.MouseButton1Click:Connect(function()
		warn(_G.SelectValueOfRemote)
	end)
end
local function NAKOUH_fake_script() -- Fake Script: StarterGui.DevelopemtTools.Frame.MainFrame3.Frame.TextButton.LocalScript
    local script = Instance.new("LocalScript")
    script.Name = "LocalScript"
    script.Parent = Converted["_TextButton12"]
    local req = require
    local require = function(obj)
        local fake = fake_module_scripts[obj]
        if fake then
            return fake()
        end
        return req(obj)
    end

	local Table = {}
	
	local function creation(Text , num)
		local textLabel = Instance.new("TextButton")
		textLabel.Text = Text
		textLabel.TextColor3 = Color3.new(1, 1, 1)
		textLabel.BackgroundTransparency = 1
		textLabel.Size = UDim2.new(1, 0, 0.1, 0) 
		textLabel.AnchorPoint = Vector2.new(0.5, 0.5)
		textLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
		textLabel.Font = Enum.Font.SourceSansBold
		textLabel.TextScaled = true
		textLabel.Parent = script.Parent.Parent.Parent.ScrollingFrame
	
		textLabel.MouseButton1Click:Connect(function()
			_G.SelectValueOfScript = Table[tonumber(num)].Name
			script.Parent.Parent.TextLabel.Text = Table[tonumber(num)].ClassName
		end)
	end
	local function DestroyMagic()
		for _, v in pairs(script.Parent.Parent.Parent.ScrollingFrame:GetChildren()) do
			if v and v:IsA("TextButton") then
				v:Destroy()
			end
		end
	end
	
	local function KissYou()
		Table = {}
		DestroyMagic()
		task.wait()
		for i, v in pairs(game:GetDescendants()) do
			if v and (v:IsA("Script") or v:IsA("LocalScript") or v:IsA("ModuleScript")) then
				table.insert(Table, i, {Name = v:GetFullName(), ClassName = v.ClassName})
				creation(tostring(v.Name), i)
				wait()
			end
		end
	end
	
	script.Parent.MouseButton1Click:Connect(KissYou)
end
local function WWSTWX_fake_script() -- Fake Script: StarterGui.DevelopemtTools.Frame.MainFrame3.Frame.TextButton.LocalScript
    local script = Instance.new("LocalScript")
    script.Name = "LocalScript"
    script.Parent = Converted["_TextButton13"]
    local req = require
    local require = function(obj)
        local fake = fake_module_scripts[obj]
        if fake then
            return fake()
        end
        return req(obj)
    end

	script.Parent.MouseButton1Click:Connect(function()
		setclipboard(_G.SelectValueOfScript)
	end)
end
local function VNHQAT_fake_script() -- Fake Script: StarterGui.DevelopemtTools.Frame.MainFrame3.Frame.TextButton.LocalScript
    local script = Instance.new("LocalScript")
    script.Name = "LocalScript"
    script.Parent = Converted["_TextButton14"]
    local req = require
    local require = function(obj)
        local fake = fake_module_scripts[obj]
        if fake then
            return fake()
        end
        return req(obj)
    end

	script.Parent.MouseButton1Click:Connect(function()
		print(_G.SelectValueOfScript)
	end)
end
local function QDVHI_fake_script() -- Fake Script: StarterGui.DevelopemtTools.Frame.MainFrame3.Frame.TextButton.LocalScript
    local script = Instance.new("LocalScript")
    script.Name = "LocalScript"
    script.Parent = Converted["_TextButton15"]
    local req = require
    local require = function(obj)
        local fake = fake_module_scripts[obj]
        if fake then
            return fake()
        end
        return req(obj)
    end

	script.Parent.MouseButton1Click:Connect(function()
		warn(_G.SelectValueOfScript)
	end)
end
local function KQMTA_fake_script() -- Fake Script: StarterGui.DevelopemtTools.Frame.MainFrame4.Frame.TextButton.LocalScript
    local script = Instance.new("LocalScript")
    script.Name = "LocalScript"
    script.Parent = Converted["_TextButton16"]
    local req = require
    local require = function(obj)
        local fake = fake_module_scripts[obj]
        if fake then
            return fake()
        end
        return req(obj)
    end

	local Table = {}
	
	local function creation(Text , num)
		local textLabel = Instance.new("TextButton")
		textLabel.Text = Text
		textLabel.TextColor3 = Color3.new(1, 1, 1)
		textLabel.BackgroundTransparency = 1
		textLabel.Size = UDim2.new(1, 0, 0.1, 0) 
		textLabel.AnchorPoint = Vector2.new(0.5, 0.5)
		textLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
		textLabel.Font = Enum.Font.SourceSansBold
		textLabel.TextScaled = true
		textLabel.Parent = script.Parent.Parent.Parent.ScrollingFrame
	
		textLabel.MouseButton1Click:Connect(function()
			_G.SelectValueOfNil = Table[tonumber(num)].Name
			script.Parent.Parent.TextLabel.Text = Table[tonumber(num)].ClassName
		end)
	end
	local function DestroyMagic()
		for _, v in pairs(script.Parent.Parent.Parent.ScrollingFrame:GetChildren()) do
			if v and v:IsA("TextButton") then
				v:Destroy()
			end
		end
	end
	
	local function KissYou()
		Table = {}
		DestroyMagic()
		task.wait()
		pcall(function()
			for i, v in next, getnilinstances() do 
				if v then
					table.insert(Table, i, {Name = v:GetFullName(), ClassName = v.ClassName})
					creation(tostring(v.Name), i)
					wait()
				end 
			end
		end)
	end
	
	script.Parent.MouseButton1Click:Connect(KissYou)
end
local function FUDDYBX_fake_script() -- Fake Script: StarterGui.DevelopemtTools.Frame.MainFrame4.Frame.TextButton.LocalScript
    local script = Instance.new("LocalScript")
    script.Name = "LocalScript"
    script.Parent = Converted["_TextButton17"]
    local req = require
    local require = function(obj)
        local fake = fake_module_scripts[obj]
        if fake then
            return fake()
        end
        return req(obj)
    end

	script.Parent.MouseButton1Click:Connect(function()
		pcall(function()
			for i, v in next, getnilinstances() do 
				if v.Name == _G.SelectValueOfNil then
					v:Destroy()
				end
			end
		end)
	end)
end
local function XKIDD_fake_script() -- Fake Script: StarterGui.DevelopemtTools.Frame.TextButton.LocalScript
    local script = Instance.new("LocalScript")
    script.Name = "LocalScript"
    script.Parent = Converted["_TextButton18"]
    local req = require
    local require = function(obj)
        local fake = fake_module_scripts[obj]
        if fake then
            return fake()
        end
        return req(obj)
    end

	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.Parent.Enabled = false
		script.Parent.Parent.Parent["Magic Open"].Visible = true
	end)
end
local function ZSZGP_fake_script() -- Fake Script: StarterGui.DevelopemtTools.Magic Open.TextButton.LocalScript
    local script = Instance.new("LocalScript")
    script.Name = "LocalScript"
    script.Parent = Converted["_TextButton19"]
    local req = require
    local require = function(obj)
        local fake = fake_module_scripts[obj]
        if fake then
            return fake()
        end
        return req(obj)
    end

	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.Parent.Frame.Visible = true
	end)
end

coroutine.wrap(EWQDQR_fake_script)()
coroutine.wrap(RCRSJ_fake_script)()
coroutine.wrap(NIZYILR_fake_script)()
coroutine.wrap(ZJMV_fake_script)()
coroutine.wrap(XWCK_fake_script)()
coroutine.wrap(LQABGDN_fake_script)()
coroutine.wrap(AUJBQLV_fake_script)()
coroutine.wrap(VOZQKQ_fake_script)()
coroutine.wrap(BYCZF_fake_script)()
coroutine.wrap(WNYWFIW_fake_script)()
coroutine.wrap(LSQPLK_fake_script)()
coroutine.wrap(QHYQTWN_fake_script)()
coroutine.wrap(ZNGUED_fake_script)()
coroutine.wrap(VRCCQPU_fake_script)()
coroutine.wrap(CISUO_fake_script)()
coroutine.wrap(ZLTK_fake_script)()
coroutine.wrap(NAKOUH_fake_script)()
coroutine.wrap(WWSTWX_fake_script)()
coroutine.wrap(VNHQAT_fake_script)()
coroutine.wrap(QDVHI_fake_script)()
coroutine.wrap(KQMTA_fake_script)()
coroutine.wrap(FUDDYBX_fake_script)()
coroutine.wrap(XKIDD_fake_script)()
coroutine.wrap(ZSZGP_fake_script)()
